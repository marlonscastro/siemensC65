CCS PCM C Compiler, Version 4.114, 93463165               21-jan-15 19:53

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\LCD SIEMENS C65 130X130\C65 3\main.lst

               ROM used: 1560 words (19%)
                         Largest free fragment is 2048
               RAM used: 58 (16%) at main() level
                         88 (24%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   44F
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   221
.................... #include <16F876.h> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
.................... #FUSES NOWDT, HS, NOPUT, NOBROWNOUT, NOLVP, NOCPD, NOWRT, NODEBUG, NOPROTECT 
.................... #use delay(clock=16000000) 
*
0256:  MOVLW  54
0257:  MOVWF  04
0258:  BCF    03.7
0259:  MOVF   00,W
025A:  BTFSC  03.2
025B:  GOTO   26A
025C:  MOVLW  05
025D:  MOVWF  78
025E:  CLRF   77
025F:  DECFSZ 77,F
0260:  GOTO   25F
0261:  DECFSZ 78,F
0262:  GOTO   25E
0263:  MOVLW  2E
0264:  MOVWF  77
0265:  DECFSZ 77,F
0266:  GOTO   265
0267:  GOTO   268
0268:  DECFSZ 00,F
0269:  GOTO   25C
026A:  RETURN
....................  
.................... #include "c65_S6B33B2.c" 
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
045E:  BCF    03.5
045F:  CLRF   28
0460:  CLRF   29
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... #define OSC 0x02      // Oscillation mode set 
.................... #define DRVOUT 0x10   // Driver output mode set 
.................... #define DCDCSEL 0x20  // DC-DC select 
.................... #define BIAS 0x22     // Bias set 
.................... #define DCDCCLK 0x24  // DCDC clock division set 
.................... #define DCDCCTL 0x26  // DCDC and AMP on/off set 
.................... #define TEMPCOM 0x28  // Temperature compensation set 
.................... #define CONT1 0x2A    // Contrast control 1 
.................... #define CONT2 0x2B    // Contrast control 2 
.................... #define STBYOFF 0x2C  // Standby off 
.................... #define STBYON 0x2D   // Standby on 
.................... #define ADRMODE 0x30  // Adressing mode set 
.................... #define ROWVEC 0x32   // Row vector mode set 
.................... #define NLINV 0x34    // N-line invertion set 
.................... #define FRAFRE 0x36   // Frame frequency control 
.................... #define ENTRY 0x40    // Entry mode set 
.................... #define XSET 0x42     // X-adress area set 
.................... #define YSET 0x43     // Y-adress area set 
.................... #define DISON 0x51    // Display on 
.................... #define DISOFF 0x50   // Display off 
....................  
.................... // 8-bit color definitions 
.................... #define WHITE 0xFF 
.................... #define BLACK 0x00 
.................... #define RED 0xE0 
.................... #define GREEN 0x1C 
.................... #define BLUE 0x03 
.................... #define PINK 0xE3 
.................... #define LBLUE 0x1F 
.................... #define YELLOW 0xFC 
.................... #define ORANGE 0xF0 
.................... /* 
.................... ***************************************************************************** 
.................... Pinout 
.................... | 1 Led- 
.................... | 2 Led+ 
.................... | 3 NC 
.................... | 4 GND 
.................... | 5 2V9 
.................... | 6 DATA 
.................... | 7 CLK 
.................... | 8 RS 
.................... | 9 RST 
.................... | 10 CS 
.................... ***************************************************************************** 
.................... */ 
....................  
.................... #define LCD_CS              pin_b6 
.................... #define LCD_RESET           pin_b5 
.................... #define LCD_RS              pin_b4 
.................... #define LCD_SCK             pin_b3 
.................... #define LCD_DATA            pin_b2 
....................  
.................... BYTE const font8x12[] = { 
....................  
....................   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // sp        0x20 
....................   0x00,0x30,0x78,0x78,0x78,0x30,0x30,0x00,0x30,0x30,0x00,0x00,        // !         0x21 
....................   0x00,0x66,0x66,0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // "         0x22 
....................   0x00,0x6C,0x6C,0xFE,0x6C,0x6C,0x6C,0xFE,0x6C,0x6C,0x00,0x00,        // #         0x23 
....................   0x30,0x30,0x7C,0xC0,0xC0,0x78,0x0C,0x0C,0xF8,0x30,0x30,0x00,        // $         0x24 
....................   0x00,0x00,0x00,0xC4,0xCC,0x18,0x30,0x60,0xCC,0x8C,0x00,0x00,        // %         0x25 
....................   0x00,0x70,0xD8,0xD8,0x70,0xFA,0xDE,0xCC,0xDC,0x76,0x00,0x00,        // &         0x26 
....................   0x00,0x30,0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // Grad      0x27 
....................   0x00,0x0C,0x18,0x30,0x60,0x60,0x60,0x30,0x18,0x0C,0x00,0x00,        // (         0x28 
....................   0x00,0x60,0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x60,0x00,0x00,        // )         0x29 
....................   0x00,0x00,0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00,0x00,0x00,        // *         0x2A 
....................   0x00,0x00,0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00,0x00,0x00,        // +         0x2B 
....................   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x60,0x00,        // ,         0x2C 
....................   0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,        // -         0x2D 
....................   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x00,0x00,        // .         0x2E 
....................   0x00,0x00,0x02,0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00,0x00,        // /         0x2F  
....................   0x00,0x7C,0xC6,0xCE,0xDE,0xD6,0xF6,0xE6,0xC6,0x7C,0x00,0x00,        // 0         0x30 
....................   0x00,0x10,0x30,0xF0,0x30,0x30,0x30,0x30,0x30,0xFC,0x00,0x00,        // 1         0x31 
....................   0x00,0x78,0xCC,0xCC,0x0C,0x18,0x30,0x60,0xCC,0xFC,0x00,0x00,        // 2         0x32 
....................   0x00,0x78,0xCC,0x0C,0x0C,0x38,0x0C,0x0C,0xCC,0x78,0x00,0x00,        // 3         0x33 
....................   0x00,0x0C,0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x0C,0x1E,0x00,0x00,        // 4         0x34 
....................   0x00,0xFC,0xC0,0xC0,0xC0,0xF8,0x0C,0x0C,0xCC,0x78,0x00,0x00,        // 5         0x35 
....................   0x00,0x38,0x60,0xC0,0xC0,0xF8,0xCC,0xCC,0xCC,0x78,0x00,0x00,        // 6         0x36 
....................   0x00,0xFE,0xC6,0xC6,0x06,0x0C,0x18,0x30,0x30,0x30,0x00,0x00,        // 7         0x37 
....................   0x00,0x78,0xCC,0xCC,0xCC,0x78,0xCC,0xCC,0xCC,0x78,0x00,0x00,        // 8         0x38 
....................   0x00,0x78,0xCC,0xCC,0xCC,0x7C,0x18,0x18,0x30,0x70,0x00,0x00,        // 9         0x39 
....................   0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x38,0x38,0x00,0x00,0x00,        // :         0x3A 
....................   0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x38,0x38,0x18,0x30,0x00,        // ;         0x3B 
....................   0x00,0x0C,0x18,0x30,0x60,0xC0,0x60,0x30,0x18,0x0C,0x00,0x00,        // <         0x3C 
....................   0x00,0x00,0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,        // =         0x3D 
....................   0x00,0x60,0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x60,0x00,0x00,        // >         0x3E 
....................   0x00,0x78,0xCC,0x0C,0x18,0x30,0x30,0x00,0x30,0x30,0x00,0x00,        // ?         0x3F 
....................   0x00,0x7C,0xC6,0xC6,0xDE,0xDE,0xDE,0xC0,0xC0,0x7C,0x00,0x00,        // @         0x40 
....................   0x00,0x30,0x78,0xCC,0xCC,0xCC,0xFC,0xCC,0xCC,0xCC,0x00,0x00,        // A         0x41 
....................   0x00,0xFC,0x66,0x66,0x66,0x7C,0x66,0x66,0x66,0xFC,0x00,0x00,        // B         0x42 
....................   0x00,0x3C,0x66,0xC6,0xC0,0xC0,0xC0,0xC6,0x66,0x3C,0x00,0x00,        // C         0x43 
....................   0x00,0xF8,0x6C,0x66,0x66,0x66,0x66,0x66,0x6C,0xF8,0x00,0x00,        // D         0x44 
....................   0x00,0xFE,0x62,0x60,0x64,0x7C,0x64,0x60,0x62,0xFE,0x00,0x00,        // E         0x45 
....................   0x00,0xFE,0x66,0x62,0x64,0x7C,0x64,0x60,0x60,0xF0,0x00,0x00,        // F         0x46 
....................   0x00,0x3C,0x66,0xC6,0xC0,0xC0,0xCE,0xC6,0x66,0x3E,0x00,0x00,        // G         0x47 
....................   0x00,0xCC,0xCC,0xCC,0xCC,0xFC,0xCC,0xCC,0xCC,0xCC,0x00,0x00,        // H         0x48 
....................   0x00,0x78,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x78,0x00,0x00,        // I         0x49 
....................   0x00,0x1E,0x0C,0x0C,0x0C,0x0C,0xCC,0xCC,0xCC,0x78,0x00,0x00,        // J         0x4A 
....................   0x00,0xE6,0x66,0x6C,0x6C,0x78,0x6C,0x6C,0x66,0xE6,0x00,0x00,        // K         0x4B 
....................   0x00,0xF0,0x60,0x60,0x60,0x60,0x62,0x66,0x66,0xFE,0x00,0x00,        // L         0x4C 
....................   0x00,0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6,0xC6,0xC6,0x00,0x00,        // M         0x4D 
....................   0x00,0xC6,0xC6,0xE6,0xF6,0xFE,0xDE,0xCE,0xC6,0xC6,0x00,0x00,        // N         0x4E 
....................   0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xC6,0xC6,0x6C,0x38,0x00,0x00,        // O         0x4F 
....................   0x00,0xFC,0x66,0x66,0x66,0x7C,0x60,0x60,0x60,0xF0,0x00,0x00,        // P         0x50 
....................   0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xCE,0xDE,0x7C,0x0C,0x1E,0x00,        // Q         0x51 
....................   0x00,0xFC,0x66,0x66,0x66,0x7C,0x6C,0x66,0x66,0xE6,0x00,0x00,        // R         0x52 
....................   0x00,0x78,0xCC,0xCC,0xC0,0x70,0x18,0xCC,0xCC,0x78,0x00,0x00,        // S         0x53 
....................   0x00,0xFC,0xB4,0x30,0x30,0x30,0x30,0x30,0x30,0x78,0x00,0x00,        // T         0x54 
....................   0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x78,0x00,0x00,        // U         0x55 
....................   0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x78,0x30,0x00,0x00,        // V         0x56 
....................   0x00,0xC6,0xC6,0xC6,0xC6,0xD6,0xD6,0x6C,0x6C,0x6C,0x00,0x00,        // W         0x57 
....................   0x00,0xCC,0xCC,0xCC,0x78,0x30,0x78,0xCC,0xCC,0xCC,0x00,0x00,        // X         0x58 
....................   0x00,0xCC,0xCC,0xCC,0xCC,0x78,0x30,0x30,0x30,0x78,0x00,0x00,        // Y         0x59 
....................   0x00,0xFE,0xCE,0x98,0x18,0x30,0x60,0x62,0xC6,0xFE,0x00,0x00,        // Z         0x5A 
....................   0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3C,0x00,0x00,        // [ -       0x5B 
....................   0x00,0x00,0x80,0xC0,0x60,0x30,0x18,0x0C,0x06,0x02,0x00,0x00,        // backslash 0x5C 
....................   0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00,0x00,        // ]         0x5D 
....................   0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // ^         0x5E 
....................   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,        // _         0x5F 
....................   0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // '         0x60 
....................   0x00,0x00,0x00,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0x76,0x00,0x00,        // a         0x61 
....................   0x00,0xE0,0x60,0x60,0x7C,0x66,0x66,0x66,0x66,0xDC,0x00,0x00,        // b         0x62 
....................   0x00,0x00,0x00,0x00,0x78,0xCC,0xC0,0xC0,0xCC,0x78,0x00,0x00,        // c         0x63 
....................   0x00,0x1C,0x0C,0x0C,0x7C,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,        // d         0x64 
....................   0x00,0x00,0x00,0x00,0x78,0xCC,0xFC,0xC0,0xCC,0x78,0x00,0x00,        // e         0x65 
....................   0x00,0x38,0x6C,0x60,0x60,0xF8,0x60,0x60,0x60,0xF0,0x00,0x00,        // f         0x66 
....................   0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0xCC,0x7C,0x0C,0xCC,0x78,        // g         0x67 
....................   0x00,0xE0,0x60,0x60,0x6C,0x76,0x66,0x66,0x66,0xE6,0x00,0x00,        // h         0x68 
....................   0x00,0x18,0x18,0x00,0x78,0x18,0x18,0x18,0x18,0x7E,0x00,0x00,        // i         0x69 
....................   0x00,0x0C,0x0C,0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0xCC,0xCC,0x78,        // j         0x6A 
....................   0x00,0xE0,0x60,0x60,0x66,0x6C,0x78,0x6C,0x66,0xE6,0x00,0x00,        // k         0x6B 
....................   0x00,0x78,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x00,0x00,        // l         0x6C 
....................   0x00,0x00,0x00,0x00,0xFC,0xD6,0xD6,0xD6,0xD6,0xC6,0x00,0x00,        // m         0x6D 
....................   0x00,0x00,0x00,0x00,0xF8,0xCC,0xCC,0xCC,0xCC,0xCC,0x00,0x00,        // n         0x6E 
....................   0x00,0x00,0x00,0x00,0x78,0xCC,0xCC,0xCC,0xCC,0x78,0x00,0x00,        // o         0x6F 
....................   0x00,0x00,0x00,0x00,0xDC,0x66,0x66,0x66,0x66,0x7C,0x60,0xF0,        // p         0x70 
....................   0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0xCC,0xCC,0x7C,0x0C,0x1E,        // q         0x71 
....................   0x00,0x00,0x00,0x00,0xEC,0x6E,0x76,0x60,0x60,0xF0,0x00,0x00,        // r         0x72 
....................   0x00,0x00,0x00,0x00,0x78,0xCC,0x60,0x18,0xCC,0x78,0x00,0x00,        // s         0x73 
....................   0x00,0x00,0x20,0x60,0xFC,0x60,0x60,0x60,0x6C,0x38,0x00,0x00,        // t         0x74 
....................   0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,        // u         0x75 
....................   0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0x78,0x30,0x00,0x00,        // v         0x76 
....................   0x00,0x00,0x00,0x00,0xC6,0xC6,0xD6,0xD6,0x6C,0x6C,0x00,0x00,        // w         0x77 
....................   0x00,0x00,0x00,0x00,0xC6,0x6C,0x38,0x38,0x6C,0xC6,0x00,0x00,        // x         0x78 
....................   0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x3C,0x0C,0x18,0xF0,        // y         0x79 
....................   0x00,0x00,0x00,0x00,0xFC,0x8C,0x18,0x60,0xC4,0xFC,0x00,0x00,        // z         0x7A 
....................   0x00,0x1C,0x30,0x30,0x60,0xC0,0x60,0x30,0x30,0x1C,0x00,0x00,        // {         0x7B 
....................   0x00,0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x00,0x00,        // |         0x7C 
....................   0x00,0xE0,0x30,0x30,0x18,0x0C,0x18,0x30,0x30,0xE0,0x00,0x00,        // }         0x7D 
....................   0x00,0x73,0xDA,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // ->        0x7E 
....................   0x00,0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0x00,0x00,0x00,        // <-        0x7F 
.................... }; 
....................  
.................... //-------------------------------------------------------------------------------------- 
....................  
....................  
....................  
.................... BYTE const font8x8[] = { 
....................   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // Leerzeichen 0x20  
....................   0x00,0x00,0x00,0xF2,0xF2,0x00,0x00,0x00,  // ! 
....................   0x00,0xE0,0xE0,0x00,0x00,0xE0,0xE0,0x00,  // " 
....................   0x28,0xFE,0xFE,0x28,0x28,0xFE,0xFE,0x28,  // # 
....................   0x00,0x48,0x5C,0xD6,0xD6,0x74,0x24,0x00,  // $ 
....................   0x00,0xC6,0x66,0x30,0x18,0xCC,0xC6,0x00,  // % 
....................   0x0A,0x4E,0xEE,0xB2,0xB2,0xFE,0x4C,0x00,  // & 
....................   0x00,0x80,0xC0,0x60,0x20,0x00,0x00,0x00,  // ' 
....................   0x00,0x00,0x82,0xC6,0x7C,0x38,0x00,0x00,  // ( 
....................   0x00,0x00,0x38,0x7C,0xC6,0x82,0x00,0x00,  // ) 
....................   0x10,0x54,0x7C,0x38,0x38,0x7C,0x54,0x10,  // * 
....................   0x00,0x10,0x10,0x7C,0x7C,0x10,0x10,0x00,  // + 
....................   0x00,0x00,0x00,0x06,0x07,0x01,0x00,0x00,  // , 
....................   0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x00,  // - 
....................   0x00,0x00,0x00,0x06,0x06,0x00,0x00,0x00,  // . 
....................   0x40,0x60,0x30,0x18,0x0C,0x06,0x02,0x00,  // / 
....................   0x00,0x7C,0xFE,0xA2,0x92,0xFE,0x7C,0x00,  // 0  0x30 
....................   0x00,0x02,0x02,0xFE,0xFE,0x22,0x02,0x00,  // 1 
....................   0x00,0x62,0xF2,0x92,0x8A,0xCE,0x46,0x00,  // 2 
....................   0x00,0x6C,0xFE,0x92,0x92,0xC6,0x44,0x00,  // 3 
....................   0x08,0xFE,0xFE,0x68,0x28,0x18,0x18,0x00,  // 4 
....................   0x00,0x9C,0xBE,0xA2,0xA2,0xE6,0xE4,0x00,  // 5 
....................   0x00,0x4C,0xDE,0x92,0x92,0xFE,0x7C,0x00,  // 6 
....................   0x00,0xC0,0xE0,0xBE,0x9E,0xC0,0xC0,0x00,  // 7 
....................   0x00,0x6C,0xFE,0x92,0x92,0xFE,0x6C,0x00,  // 8 
....................   0x00,0x7C,0xFE,0x92,0x92,0xF6,0x64,0x00,  // 9 
....................   0x00,0x00,0x00,0x24,0x24,0x00,0x00,0x00,  // : 
....................   0x00,0x00,0x00,0x26,0x27,0x01,0x00,0x00,  // ; 
....................   0x00,0x82,0x82,0xC6,0x6C,0x38,0x10,0x00,  // < 
....................   0x00,0x28,0x28,0x28,0x28,0x28,0x28,0x00,  // = 
....................   0x00,0x10,0x38,0x6C,0xC6,0x82,0x82,0x00,  // > 
....................   0x00,0x60,0xF0,0x9A,0x8A,0xC0,0x40,0x00,  // ? 
....................   0x00,0x74,0xF2,0xB2,0x82,0xFE,0x7C,0x00,  // @ 
....................   0x00,0x3E,0x7E,0xD0,0xD0,0x7E,0x3E,0x00,  // A  0x41 65 
....................   0x00,0x6C,0xFE,0x92,0x92,0xFE,0xFE,0x00,  // B 
....................   0x00,0x44,0xC6,0x82,0x82,0xFE,0x7C,0x00,  // C 
....................   0x00,0x38,0x7C,0xC6,0x82,0xFE,0xFE,0x00,  // D 
....................   0x00,0x82,0x82,0x92,0x92,0xFE,0xFE,0x00,  // E 
....................   0x00,0x80,0x80,0x90,0x90,0xFE,0xFE,0x00,  // F 
....................   0x00,0x5C,0xDE,0x92,0x82,0xFE,0x7C,0x00,  // G 
....................   0x00,0xFE,0xFE,0x10,0x10,0xFE,0xFE,0x00,  // H 
....................   0x00,0x00,0x82,0xFE,0xFE,0x82,0x00,0x00,  // I 
....................   0x00,0x80,0xFC,0xFE,0x82,0x06,0x04,0x00,  // J 
....................   0x00,0x82,0xC6,0x6C,0x38,0xFE,0xFE,0x00,  // K 
....................   0x00,0x02,0x02,0x02,0x02,0xFE,0xFE,0x00,  // L 
....................   0xFE,0xFE,0x60,0x30,0x60,0xFE,0xFE,0x00,  // M 
....................   0x00,0xFE,0xFE,0x38,0x70,0xFE,0xFE,0x00,  // N 
....................   0x00,0x7C,0xFE,0x82,0x82,0xFE,0x7C,0x00,  // O 
....................   0x00,0x60,0xF0,0x90,0x90,0xFE,0xFE,0x00,  // P 
....................   0x00,0x7A,0xFE,0x86,0x84,0xFC,0x78,0x00,  // Q 
....................   0x00,0x62,0xF6,0x9C,0x98,0xFE,0xFE,0x00,  // R 
....................   0x00,0x4C,0xDE,0x92,0x92,0xF6,0x64,0x00,  // S 
....................   0x00,0x80,0x80,0xFE,0xFE,0x80,0x80,0x00,  // T 
....................   0x00,0xFC,0xFE,0x02,0x02,0xFE,0xFC,0x00,  // U 
....................   0x00,0xF8,0xFC,0x06,0x06,0xFC,0xF8,0x00,  // V 
....................   0xFE,0xFE,0x0C,0x18,0x0C,0xFE,0xFE,0x00,  // W 
....................   0x00,0xC6,0xEE,0x38,0x38,0xEE,0xC6,0x00,  // X 
....................   0x00,0xE0,0xF0,0x1E,0x1E,0xF0,0xE0,0x00,  // Y 
....................   0x00,0xC2,0xE2,0xB2,0x9A,0x8E,0x86,0x00,  // Z 
....................   0x00,0x00,0x82,0x82,0xFE,0xFE,0x00,0x00,  // [ 
....................   0x40,0x60,0x30,0x18,0x0C,0x06,0x02,0x00,  // backslash 
....................   0x00,0x00,0xFE,0xFE,0x82,0x82,0x00,0x00,  // ] 
....................   0x00,0x80,0xC0,0x60,0x20,0x00,0x00,0x00,  // ^ 
....................   0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,  // _ 
....................   0x00,0x80,0xC0,0x60,0x20,0x00,0x00,0x00,  // ` 
....................   0x00,0x1E,0x3E,0x2A,0x2A,0x2E,0x04,0x00,  // a 
....................   0x00,0x0C,0x1E,0x12,0x12,0x7E,0x7E,0x00,  // b 
....................   0x00,0x00,0x22,0x22,0x22,0x3E,0x1C,0x00,  // c 
....................   0x00,0x7E,0x7E,0x12,0x12,0x1E,0x0C,0x00,  // d 
....................   0x00,0x18,0x3A,0x2A,0x2A,0x3E,0x1C,0x00,  // e 
....................   0x00,0x50,0x50,0x7E,0x3E,0x10,0x00,0x00,  // f 
....................   0x00,0x3E,0x3F,0x25,0x25,0x3D,0x19,0x00,  // g 
....................   0x00,0x0E,0x1E,0x10,0x10,0x7E,0x7E,0x00,  // h 
....................   0x00,0x00,0x02,0x5E,0x5E,0x12,0x00,0x00,  // i 
....................   0x00,0x5E,0x5F,0x01,0x01,0x01,0x00,0x00,  // j 
....................   0x00,0x02,0x16,0x1C,0x08,0x7E,0x7E,0x00,  // k 
....................   0x00,0x00,0x02,0x7E,0x7E,0x42,0x00,0x00,  // l 
....................   0x1E,0x3E,0x38,0x1C,0x18,0x3E,0x3E,0x00,  // m 
....................   0x00,0x1E,0x3E,0x20,0x20,0x3E,0x3E,0x00,  // n 
....................   0x00,0x1C,0x3E,0x22,0x22,0x3E,0x1C,0x00,  // o 
....................   0x00,0x18,0x3C,0x24,0x24,0x3F,0x3F,0x00,  // p 
....................   0x00,0x3F,0x3F,0x24,0x24,0x3C,0x18,0x00,  // q 
....................   0x00,0x10,0x30,0x20,0x20,0x3E,0x3E,0x00,  // r 
....................   0x00,0x24,0x2E,0x2A,0x2A,0x3A,0x12,0x00,  // s 
....................   0x00,0x22,0x22,0x7E,0x7C,0x20,0x20,0x00,  // t 
....................   0x00,0x3E,0x3E,0x02,0x02,0x3E,0x3C,0x00,  // u 
....................   0x00,0x38,0x3C,0x06,0x06,0x3C,0x38,0x00,  // v 
....................   0x38,0x3E,0x0E,0x1C,0x0E,0x3E,0x38,0x00,  // w 
....................   0x00,0x22,0x36,0x1C,0x1C,0x36,0x22,0x00,  // x 
....................   0x00,0x3C,0x3E,0x07,0x05,0x3D,0x39,0x00,  // y 
....................   0x00,0x22,0x32,0x3A,0x2E,0x26,0x22,0x00,  // z 
....................   0x00,0x00,0x82,0x82,0xFE,0xFE,0x00,0x00,  // ] 
....................   0x00,0x44,0x92,0x92,0x7A,0x3E,0x16,0x02,  // Pfund 
....................   0x00,0x00,0xFE,0xFE,0x82,0x82,0x00,0x00,  // [ 
....................   0x00,0x10,0x30,0x7F,0x7F,0x30,0x10,0x00,  // Pfeil hoch 
....................   0x18,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00,  // Pfeil links 
.................... }; 
....................  
.................... BYTE const font5x8_1[240]={ 
.................... 0x00,0x00,0x00,0x00,0x00,   // 20 space          ASCII table for NOKIA LCD: 96 rows * 5 bytes= 480 bytes 
....................   0x00,0x00,0x5f,0x00,0x00,   // 21 ! 
....................   0x00,0x07,0x00,0x07,0x00,   // 22 " 
....................   0x14,0x7f,0x14,0x7f,0x14,   // 23 # 
....................   0x24,0x2a,0x7f,0x2a,0x12,   // 24 $ 
....................   0x23,0x13,0x08,0x64,0x62,   // 25 % 
....................   0x36,0x49,0x55,0x22,0x50,   // 26 & 
....................   0x00,0x05,0x03,0x00,0x00,   // 27 ' 
....................   0x00,0x1c,0x22,0x41,0x00,   // 28 ( 
....................   0x00,0x41,0x22,0x1c,0x00,   // 29 ) 
....................   0x14,0x08,0x3e,0x08,0x14,   // 2a * 
....................   0x08,0x08,0x3e,0x08,0x08,   // 2b + 
....................   0x00,0x50,0x30,0x00,0x00,   // 2c , 
....................   0x08,0x08,0x08,0x08,0x08,   // 2d - 
....................   0x00,0x60,0x60,0x00,0x00,   // 2e . 
....................   0x20,0x10,0x08,0x04,0x02,   // 2f / 
....................   0x3e,0x51,0x49,0x45,0x3e,   // 30 0 
....................   0x00,0x42,0x7f,0x40,0x00,   // 31 1 
....................   0x42,0x61,0x51,0x49,0x46,   // 32 2 
....................   0x21,0x41,0x45,0x4b,0x31,   // 33 3 
....................   0x18,0x14,0x12,0x7f,0x10,   // 34 4 
....................   0x27,0x45,0x45,0x45,0x39,   // 35 5 
....................   0x3c,0x4a,0x49,0x49,0x30,   // 36 6 
....................   0x01,0x71,0x09,0x05,0x03,   // 37 7 
....................   0x36,0x49,0x49,0x49,0x36,   // 38 8 
....................   0x06,0x49,0x49,0x29,0x1e,   // 39 9 
....................   0x00,0x36,0x36,0x00,0x00,   // 3a : 
....................   0x00,0x56,0x36,0x00,0x00,   // 3b ; 
....................   0x08,0x14,0x22,0x41,0x00,   // 3c < 
....................   0x14,0x14,0x14,0x14,0x14,   // 3d = 
....................   0x00,0x41,0x22,0x14,0x08,   // 3e > 
....................   0x02,0x01,0x51,0x09,0x06,   // 3f ? 
....................   0x32,0x49,0x79,0x41,0x3e,   // 40 @ 
....................   0x7e,0x11,0x11,0x11,0x7e,   // 41 A 
....................   0x7f,0x49,0x49,0x49,0x36,   // 42 B 
....................   0x3e,0x41,0x41,0x41,0x22,   // 43 C 
....................   0x7f,0x41,0x41,0x22,0x1c,   // 44 D 
....................   0x7f,0x49,0x49,0x49,0x41,   // 45 E 
....................   0x7f,0x09,0x09,0x09,0x01,   // 46 F 
....................   0x3e,0x41,0x49,0x49,0x7a,   // 47 G 
....................   0x7f,0x08,0x08,0x08,0x7f,   // 48 H 
....................   0x00,0x41,0x7f,0x41,0x00,   // 49 I 
....................   0x20,0x40,0x41,0x3f,0x01,   // 4a J 
....................   0x7f,0x08,0x14,0x22,0x41,   // 4b K 
....................   0x7f,0x40,0x40,0x40,0x40,   // 4c L 
....................   0x7f,0x02,0x0c,0x02,0x7f,   // 4d M 
....................   0x7f,0x04,0x08,0x10,0x7f,   // 4e N 
....................   0x3e,0x41,0x41,0x41,0x3e    // 4f O 
.................... };    
....................  
....................  
.................... BYTE const font5x8_2[240]=            { 
....................   0x7f,0x09,0x09,0x09,0x06,   // 50 P 
....................   0x3e,0x41,0x51,0x21,0x5e,   // 51 Q 
....................   0x7f,0x09,0x19,0x29,0x46,   // 52 R 
....................   0x46,0x49,0x49,0x49,0x31,   // 53 S 
....................   0x01,0x01,0x7f,0x01,0x01,   // 54 T 
....................   0x3f,0x40,0x40,0x40,0x3f,   // 55 U 
....................   0x1f,0x20,0x40,0x20,0x1f,   // 56 V 
....................   0x3f,0x40,0x38,0x40,0x3f,   // 57 W 
....................   0x63,0x14,0x08,0x14,0x63,   // 58 X 
....................   0x07,0x08,0x70,0x08,0x07,   // 59 Y 
....................   0x61,0x51,0x49,0x45,0x43,   // 5a Z 
....................   0x00,0x7f,0x41,0x41,0x00,   // 5b [ 
....................   0x02,0x04,0x08,0x10,0x20,   // 5c 
....................   0x00,0x41,0x41,0x7f,0x00,   // 5d 
....................   0x04,0x02,0x01,0x02,0x04,   // 5e 
....................   0x40,0x40,0x40,0x40,0x40,   // 5f 
....................   0x00,0x01,0x02,0x04,0x00,   // 60 
....................   0x20,0x54,0x54,0x54,0x78,   // 61 a 
....................   0x7f,0x48,0x44,0x44,0x38,   // 62 b 
....................   0x38,0x44,0x44,0x44,0x20,   // 63 c 
....................   0x38,0x44,0x44,0x48,0x7f,   // 64 d 
....................   0x38,0x54,0x54,0x54,0x18,   // 65 e 
....................   0x08,0x7e,0x09,0x01,0x02,   // 66 f 
....................   0x0c,0x52,0x52,0x52,0x3e,   // 67 g 
....................   0x7f,0x08,0x04,0x04,0x78,   // 68 h 
....................   0x00,0x44,0x7d,0x40,0x00,   // 69 i 
....................   0x20,0x40,0x44,0x3d,0x00,   // 6a j 
....................   0x7f,0x10,0x28,0x44,0x00,   // 6b k 
....................   0x00,0x41,0x7f,0x40,0x00,   // 6c l 
....................   0x7c,0x04,0x18,0x04,0x78,   // 6d m 
....................   0x7c,0x08,0x04,0x04,0x78,   // 6e n 
....................   0x38,0x44,0x44,0x44,0x38,   // 6f o 
....................   0x7c,0x14,0x14,0x14,0x08,   // 70 p 
....................   0x08,0x14,0x14,0x18,0x7c,   // 71 q 
....................   0x7c,0x08,0x04,0x04,0x08,   // 72 r 
....................   0x48,0x54,0x54,0x54,0x20,   // 73 s 
....................   0x04,0x3f,0x44,0x40,0x20,   // 74 t 
....................   0x3c,0x40,0x40,0x20,0x7c,   // 75 u 
....................   0x1c,0x20,0x40,0x20,0x1c,   // 76 v 
....................   0x3c,0x40,0x30,0x40,0x3c,   // 77 w 
....................   0x44,0x28,0x10,0x28,0x44,   // 78 x 
....................   0x0c,0x50,0x50,0x50,0x3c,   // 79 y 
....................   0x44,0x64,0x54,0x4c,0x44,   // 7a z 
....................   0x00,0x08,0x36,0x41,0x00,   // 7b 
....................   0x00,0x00,0x7f,0x00,0x00,   // 7c 
....................   0x00,0x41,0x36,0x08,0x00,   // 7d 
....................   0x10,0x08,0x08,0x10,0x08,   // 7e 
....................   0x78,0x46,0x41,0x46,0x78    // 7f 
.................... }; 
....................  
....................  
.................... int fY = 0; 
.................... int fX = 0; 
.................... int16 Back; 
.................... int16 Front; 
....................  
.................... void initlcd(void); 
.................... void lcdfill(char color); 
.................... void lcdcommand(unsigned char dta); 
.................... void lcddata(unsigned char dta); 
.................... void write_lcd(unsigned char b); 
.................... void drawpixel(unsigned char x,unsigned char y,unsigned char color); 
....................  
.................... void lcddata(unsigned char dta){ 
....................    output_bit(LCD_CS, 0); 
*
0348:  BCF    06.6
0349:  BSF    03.5
034A:  BCF    06.6
....................    output_bit(LCD_RS, 1); 
034B:  BCF    03.5
034C:  BSF    06.4
034D:  BSF    03.5
034E:  BCF    06.4
....................    write_lcd(dta); 
034F:  BCF    03.5
0350:  MOVF   68,W
0351:  MOVWF  71
0352:  CALL   26B
....................    output_bit(LCD_CS, 1); 
0353:  BSF    06.6
0354:  BSF    03.5
0355:  BCF    06.6
.................... } 
0356:  BCF    03.5
0357:  RETURN
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... void lcdcommand(unsigned char dta){ 
....................    output_bit(LCD_CS, 0); 
*
0274:  BCF    06.6
0275:  BSF    03.5
0276:  BCF    06.6
....................    output_bit(LCD_RS, 0); 
0277:  BCF    03.5
0278:  BCF    06.4
0279:  BSF    03.5
027A:  BCF    06.4
....................    write_lcd(dta); 
027B:  MOVF   70,W
027C:  MOVWF  71
027D:  BCF    03.5
027E:  CALL   26B
....................    output_bit(LCD_CS, 1); 
027F:  BSF    06.6
0280:  BSF    03.5
0281:  BCF    06.6
.................... } 
0282:  BCF    03.5
0283:  RETURN
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... void write_lcd(unsigned char b){ 
....................    spi_write(b); 
*
026B:  MOVF   13,W
026C:  MOVF   71,W
026D:  MOVWF  13
026E:  BSF    03.5
026F:  RRF    14,W
0270:  BTFSS  03.0
0271:  GOTO   26F
.................... } 
0272:  BCF    03.5
0273:  RETURN
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... void lcdcommand16(unsigned char cmd, unsigned char param){ 
....................    output_bit(LCD_CS, 0); 
*
0284:  BCF    06.6
0285:  BSF    03.5
0286:  BCF    06.6
....................    output_bit(LCD_RS, 0); 
0287:  BCF    03.5
0288:  BCF    06.4
0289:  BSF    03.5
028A:  BCF    06.4
....................    write_lcd(cmd); 
028B:  BCF    03.5
028C:  MOVF   53,W
028D:  MOVWF  71
028E:  CALL   26B
....................    write_lcd(param); 
028F:  MOVF   54,W
0290:  MOVWF  71
0291:  CALL   26B
....................    output_bit(LCD_CS, 1); 
0292:  BSF    06.6
0293:  BSF    03.5
0294:  BCF    06.6
.................... } 
0295:  BCF    03.5
0296:  RETURN
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... void initlcd(void){ 
.................... // ------  Hardware reset ------  
....................    output_bit(LCD_RESET, 0);    
*
02CB:  BCF    06.5
02CC:  BSF    03.5
02CD:  BCF    06.5
....................    output_bit(LCD_SCK, 1); 
02CE:  BCF    03.5
02CF:  BSF    06.3
02D0:  BSF    03.5
02D1:  BCF    06.3
....................    output_bit(LCD_DATA, 1); 
02D2:  BCF    03.5
02D3:  BSF    06.2
02D4:  BSF    03.5
02D5:  BCF    06.2
....................    output_bit(LCD_RS, 1); 
02D6:  BCF    03.5
02D7:  BSF    06.4
02D8:  BSF    03.5
02D9:  BCF    06.4
....................    output_bit(LCD_CS, 1); 
02DA:  BCF    03.5
02DB:  BSF    06.6
02DC:  BSF    03.5
02DD:  BCF    06.6
....................    output_bit(LCD_RESET, 1); 
02DE:  BCF    03.5
02DF:  BSF    06.5
02E0:  BSF    03.5
02E1:  BCF    06.5
....................     
....................    //lcdcommand(DISOFF); 
....................    lcdcommand(STBYOFF);        // STANDBY off 
02E2:  MOVLW  2C
02E3:  MOVWF  70
02E4:  BCF    03.5
02E5:  CALL   274
....................    lcdcommand16(OSC,0x01);     // P = 0x01 Oscillator on 
02E6:  MOVLW  02
02E7:  MOVWF  53
02E8:  MOVLW  01
02E9:  MOVWF  54
02EA:  CALL   284
....................    lcdcommand16(DRVOUT,0x34);  // P = 0x30 Driver output 
02EB:  MOVLW  10
02EC:  MOVWF  53
02ED:  MOVLW  34
02EE:  MOVWF  54
02EF:  CALL   284
....................    lcdcommand16(DCDCSEL,0x01); // P = 0x01 DC-DC Select 
02F0:  MOVLW  20
02F1:  MOVWF  53
02F2:  MOVLW  01
02F3:  MOVWF  54
02F4:  CALL   284
....................    lcdcommand16(BIAS,0x01);    // P = 0x01 Bias SET 
02F5:  MOVLW  22
02F6:  MOVWF  53
02F7:  MOVLW  01
02F8:  MOVWF  54
02F9:  CALL   284
....................    lcdcommand16(DCDCCLK,0x05); // P = 0x05 DCDC Clock 
02FA:  MOVLW  24
02FB:  MOVWF  53
02FC:  MOVLW  05
02FD:  MOVWF  54
02FE:  CALL   284
....................    lcdcommand16(DCDCCTL,0x0f); // P = 0x0F DCDC ON 
02FF:  MOVLW  26
0300:  MOVWF  53
0301:  MOVLW  0F
0302:  MOVWF  54
0303:  CALL   284
....................    lcdcommand16(TEMPCOM,0x00); // P = 0x00 Temp 
0304:  MOVLW  28
0305:  MOVWF  53
0306:  CLRF   54
0307:  CALL   284
....................    lcdcommand16(CONT1,0xB5);   // P = 0xA5 Contrast 1  
0308:  MOVLW  2A
0309:  MOVWF  53
030A:  MOVLW  B5
030B:  MOVWF  54
030C:  CALL   284
....................    lcdcommand16(ADRMODE,0x41); // P = 0x01 256 colors, 
030D:  MOVLW  30
030E:  MOVWF  53
030F:  MOVLW  41
0310:  MOVWF  54
0311:  CALL   284
....................    lcdcommand16(ROWVEC,0x01);  // P = 0x01 Row Vector 
0312:  MOVLW  32
0313:  MOVWF  53
0314:  MOVLW  01
0315:  MOVWF  54
0316:  CALL   284
....................    lcdcommand16(NLINV,0x82);   // P = 0x82 Forcing invertion on,every 2 blocks 
0317:  MOVLW  34
0318:  MOVWF  53
0319:  MOVLW  82
031A:  MOVWF  54
031B:  CALL   284
....................    lcdcommand16(ENTRY,0x00);   // P = 0x00 Entry mode   
031C:  MOVLW  40
031D:  MOVWF  53
031E:  CLRF   54
031F:  CALL   284
....................    lcdfill(BLACK); 
0320:  CLRF   53
0321:  CALL   297
....................    lcdcommand(DISON);          // Disp On 
0322:  MOVLW  51
0323:  MOVWF  70
0324:  CALL   274
....................    } 
0325:  BCF    0A.3
0326:  BCF    0A.4
0327:  GOTO   487 (RETURN)
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... void lcdfill(char color){ 
....................    unsigned long i; 
....................    output_bit(LCD_CS, 0);    
*
0297:  BCF    06.6
0298:  BSF    03.5
0299:  BCF    06.6
....................    output_bit(LCD_RS, 0); 
029A:  BCF    03.5
029B:  BCF    06.4
029C:  BSF    03.5
029D:  BCF    06.4
....................    write_lcd(XSET); 
029E:  MOVLW  42
029F:  MOVWF  71
02A0:  BCF    03.5
02A1:  CALL   26B
....................    write_lcd(0); 
02A2:  CLRF   71
02A3:  CALL   26B
....................    write_lcd(131); 
02A4:  MOVLW  83
02A5:  MOVWF  71
02A6:  CALL   26B
....................    write_lcd(YSET); 
02A7:  MOVLW  43
02A8:  MOVWF  71
02A9:  CALL   26B
....................    write_lcd(0); 
02AA:  CLRF   71
02AB:  CALL   26B
....................    write_lcd(131); 
02AC:  MOVLW  83
02AD:  MOVWF  71
02AE:  CALL   26B
....................    output_bit(LCD_RS, 1); 
02AF:  BSF    06.4
02B0:  BSF    03.5
02B1:  BCF    06.4
....................    for(i = 0; i < (132*132); i++) 
02B2:  BCF    03.5
02B3:  CLRF   55
02B4:  CLRF   54
02B5:  MOVF   55,W
02B6:  SUBLW  44
02B7:  BTFSS  03.0
02B8:  GOTO   2C6
02B9:  BTFSS  03.2
02BA:  GOTO   2BF
02BB:  MOVF   54,W
02BC:  SUBLW  0F
02BD:  BTFSS  03.0
02BE:  GOTO   2C6
....................       write_lcd(color); 
02BF:  MOVF   53,W
02C0:  MOVWF  71
02C1:  CALL   26B
02C2:  INCF   54,F
02C3:  BTFSC  03.2
02C4:  INCF   55,F
02C5:  GOTO   2B5
....................    output_bit(LCD_CS, 1);    
02C6:  BSF    06.6
02C7:  BSF    03.5
02C8:  BCF    06.6
.................... } 
02C9:  BCF    03.5
02CA:  RETURN
.................... // ************************************************************************************* 
.................... // 
.................... // ************************************************************************************* 
.................... void drawpixel(unsigned char x,unsigned char y,unsigned char color){ 
....................    output_bit(LCD_CS, 0); 
....................    output_bit(LCD_RS, 0);    
....................    write_lcd(XSET); 
....................    write_lcd(x); 
....................    write_lcd(x); 
....................    write_lcd(YSET); 
....................    write_lcd(y); 
....................    write_lcd(y); 
....................    output_bit(LCD_RS, 1); 
....................    write_lcd(color); //RRRGGGBB 
....................    output_bit(LCD_CS, 1); 
.................... } 
....................  
.................... void setFillArea(int X, int Y, int Width, int Height){ 
*
0328:  MOVLW  02
0329:  ADDWF  68,W
032A:  MOVWF  6C
032B:  MOVLW  02
032C:  ADDWF  68,W
032D:  ADDWF  6A,W
032E:  MOVWF  6D
032F:  MOVF   69,W
0330:  MOVWF  6E
0331:  MOVF   6B,W
0332:  ADDWF  69,W
0333:  ADDLW  FF
0334:  MOVWF  6F
....................    int StartX = 2 + X; 
....................    int EndX = 2 + X + Width; 
....................     
....................    int StartY = Y; 
....................    int EndY = Y + Height - 1; 
....................     
....................    lcdcommand(XSET);  
0335:  MOVLW  42
0336:  MOVWF  70
0337:  CALL   274
....................    lcdcommand(StartX);  
0338:  MOVF   6C,W
0339:  MOVWF  70
033A:  CALL   274
....................    lcdcommand(EndX); 
033B:  MOVF   6D,W
033C:  MOVWF  70
033D:  CALL   274
....................    lcdcommand(YSET);  
033E:  MOVLW  43
033F:  MOVWF  70
0340:  CALL   274
....................    lcdcommand(StartY);  
0341:  MOVF   6E,W
0342:  MOVWF  70
0343:  CALL   274
....................    lcdcommand(EndY);    
0344:  MOVF   6F,W
0345:  MOVWF  70
0346:  CALL   274
....................     
.................... /*   int StartX = 2 + X; 
....................    int EndX = 2 + X + Width; 
....................     
....................    int StartY = Y; 
....................    int EndY = Y + Height - 1; 
....................     
....................    lcdcommand(XSET);  
....................    lcdcommand(StartX);  
....................    lcdcommand(EndX); 
....................    lcdcommand(YSET);  
....................    lcdcommand(StartY);  
....................    lcdcommand(EndY);  */    
.................... } 
0347:  RETURN
....................  
.................... void putChar(int16 BackColor, int16 FrontColor, char C, int X, int Y){ 
....................    setFillArea(X, Y, 5, 8); 
*
0408:  MOVF   63,W
0409:  MOVWF  68
040A:  MOVF   64,W
040B:  MOVWF  69
040C:  MOVLW  05
040D:  MOVWF  6A
040E:  MOVLW  08
040F:  MOVWF  6B
0410:  CALL   328
....................    int i, j, Line; 
....................  
....................    for (i = 0; i < 5; i++){ 
0411:  CLRF   65
0412:  MOVF   65,W
0413:  SUBLW  04
0414:  BTFSS  03.0
0415:  GOTO   44A
....................       if (C<0x50)       
0416:  MOVF   62,W
0417:  SUBLW  4F
0418:  BTFSS  03.0
0419:  GOTO   426
....................          Line = font5x8_1[(((C&0xff)-0x20)*5+i)]; 
041A:  MOVF   62,W
041B:  ADDLW  E0
041C:  MOVWF  69
041D:  MOVWF  6A
041E:  MOVLW  05
041F:  MOVWF  6B
0420:  CALL   3C8
0421:  MOVF   65,W
0422:  ADDWF  78,W
0423:  CALL   033
0424:  MOVWF  78
0425:  MOVWF  67
....................       if (C>0x4f) 
0426:  MOVF   62,W
0427:  SUBLW  4F
0428:  BTFSC  03.0
0429:  GOTO   436
....................          Line = font5x8_2[(((C&0xff)-0x50)*5+i)]; 
042A:  MOVF   62,W
042B:  ADDLW  B0
042C:  MOVWF  69
042D:  MOVWF  6A
042E:  MOVLW  05
042F:  MOVWF  6B
0430:  CALL   3C8
0431:  MOVF   65,W
0432:  ADDWF  78,W
0433:  CALL   12A
0434:  MOVWF  78
0435:  MOVWF  67
....................       for (j = 0; j < 8; j++){ 
0436:  CLRF   66
0437:  MOVF   66,W
0438:  SUBLW  07
0439:  BTFSS  03.0
043A:  GOTO   448
....................          if (Line & 0x01){ // Line & 0x80     
043B:  BTFSS  67.0
043C:  GOTO   441
....................             lcddata(FrontColor); 
043D:  MOVF   60,W
043E:  MOVWF  68
043F:  CALL   348
....................          } 
....................          else{ 
0440:  GOTO   444
....................             lcddata(BackColor); 
0441:  MOVF   5E,W
0442:  MOVWF  68
0443:  CALL   348
....................          } 
....................          Line = Line >> 1;   // Line = Line << 1; 
0444:  BCF    03.0
0445:  RRF    67,F
....................       } 
0446:  INCF   66,F
0447:  GOTO   437
....................    }  
0448:  INCF   65,F
0449:  GOTO   412
.................... } 
.................... void drawBox(int16 Color, int X, int Y, int Width, int Height){    
....................    setFillArea(X, Y, Width, Height); 
*
0358:  MOVF   55,W
0359:  MOVWF  68
035A:  MOVF   56,W
035B:  MOVWF  69
035C:  MOVF   57,W
035D:  MOVWF  6A
035E:  MOVF   58,W
035F:  MOVWF  6B
0360:  CALL   328
....................    int i, j, Line; 
....................   
....................    for (i = 0; i < Width; i++){ 
0361:  CLRF   59
0362:  MOVF   57,W
0363:  SUBWF  59,W
0364:  BTFSC  03.0
0365:  GOTO   374
....................       Line = 0xff; 
0366:  MOVLW  FF
0367:  MOVWF  5B
....................       for (j = 0; j < Height; j++) 
0368:  CLRF   5A
0369:  MOVF   58,W
036A:  SUBWF  5A,W
036B:  BTFSC  03.0
036C:  GOTO   372
....................          lcddata(Color); 
036D:  MOVF   53,W
036E:  MOVWF  68
036F:  CALL   348
0370:  INCF   5A,F
0371:  GOTO   369
....................    }  
0372:  INCF   59,F
0373:  GOTO   362
.................... } 
0374:  RETURN
.................... void setXY(int X, int Y){ 
....................   fX = X; 
....................   fY = Y; 
.................... } 
....................  
.................... void setFrontColor(int16 Color){ 
....................   Front = Color; 
.................... } 
....................  
.................... void setBackColor(int16 Color){ 
....................   Back = Color; 
.................... } 
....................  
.................... void putText(int16 BackColor, int16 FrontColor, char* Text, int Length, int X, int Y){ 
....................   int i; 
....................   for (i = 0; i < Length; i++){ 
*
03ED:  CLRF   5C
03EE:  MOVF   59,W
03EF:  SUBWF  5C,W
03F0:  BTFSC  03.0
03F1:  GOTO   44E
....................     putChar(BackColor,FrontColor,Text[i],X,Y); 
03F2:  MOVF   5C,W
03F3:  ADDWF  57,W
03F4:  MOVWF  04
03F5:  BCF    03.7
03F6:  BTFSC  58.0
03F7:  BSF    03.7
03F8:  MOVF   00,W
03F9:  MOVWF  5D
03FA:  MOVF   54,W
03FB:  MOVWF  5F
03FC:  MOVF   53,W
03FD:  MOVWF  5E
03FE:  MOVF   56,W
03FF:  MOVWF  61
0400:  MOVF   55,W
0401:  MOVWF  60
0402:  MOVF   5D,W
0403:  MOVWF  62
0404:  MOVF   5A,W
0405:  MOVWF  63
0406:  MOVF   5B,W
0407:  MOVWF  64
....................     X +=6; 
*
044A:  MOVLW  06
044B:  ADDWF  5A,F
....................   }       
044C:  INCF   5C,F
044D:  GOTO   3EE
.................... } 
044E:  RETURN
....................  
.................... void writeLn(char* Text){ 
....................    putText(Back, Front, Text, strlen(Text), fX, fY); 
....................    fY+=12; 
.................... } 
....................  
....................  
....................  
.................... #define LED_STATUS   pin_a1 
....................  
.................... #define SPI_MODE_0  (SPI_L_TO_H | SPI_XMIT_L_TO_H) 
.................... #define SPI_MODE_1  (SPI_L_TO_H) 
.................... #define SPI_MODE_2  (SPI_H_TO_L) 
.................... #define SPI_MODE_3  (SPI_H_TO_L | SPI_XMIT_L_TO_H) 
....................  
.................... int tempo; 
.................... char text[30]; 
....................  
.................... #int_TIMER0 
.................... void  TIMER0_isr(void){ 
....................    tempo++; 
*
0221:  INCF   30,F
....................    if(tempo == 70){   //  46 * 21,8ms =~ 1002,8ms ou 1,002 segundos  
0222:  MOVF   30,W
0223:  SUBLW  46
0224:  BTFSS  03.2
0225:  GOTO   22C
....................       tempo=0; 
0226:  CLRF   30
....................       output_toggle(LED_STATUS); 
0227:  BSF    03.5
0228:  BCF    05.1
0229:  MOVLW  02
022A:  BCF    03.5
022B:  XORWF  05,F
....................    } 
....................    output_toggle(pin_c4);    
022C:  BCF    4F.4
022D:  MOVF   4F,W
022E:  BSF    03.5
022F:  MOVWF  07
0230:  MOVLW  10
0231:  BCF    03.5
0232:  XORWF  07,F
.................... } 
0233:  BCF    0B.2
0234:  BCF    0A.3
0235:  BCF    0A.4
0236:  GOTO   01D
.................... void main(void){ 
*
0255:  DATA 00,00
*
044F:  CLRF   04
0450:  BCF    03.7
0451:  MOVLW  1F
0452:  ANDWF  03,F
0453:  CLRF   2A
0454:  CLRF   2B
0455:  MOVLW  FF
0456:  MOVWF  4F
0457:  CLRF   51
0458:  CLRF   50
0459:  BSF    03.5
045A:  BSF    1F.0
045B:  BSF    1F.1
045C:  BSF    1F.2
045D:  BCF    1F.3
....................    int i; 
....................    setup_spi(SPI_MASTER | SPI_MODE_0 | SPI_CLK_DIV_4 );    
*
0461:  BCF    14.5
0462:  BCF    4F.5
0463:  MOVF   4F,W
0464:  BSF    03.5
0465:  MOVWF  07
0466:  BCF    03.5
0467:  BSF    4F.4
0468:  MOVF   4F,W
0469:  BSF    03.5
046A:  MOVWF  07
046B:  BCF    03.5
046C:  BCF    4F.3
046D:  MOVF   4F,W
046E:  BSF    03.5
046F:  MOVWF  07
0470:  MOVLW  20
0471:  BCF    03.5
0472:  MOVWF  14
0473:  MOVLW  40
0474:  BSF    03.5
0475:  MOVWF  14
....................    //setup_spi(SPI_SS_DISABLED); 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit);  //RTCC_DIV_256    //21.8 ms overflow 
0476:  MOVF   01,W
0477:  ANDLW  C0
0478:  IORLW  04
0479:  MOVWF  01
....................    setup_adc_ports(NO_ANALOGS); 
047A:  BSF    1F.0
047B:  BSF    1F.1
047C:  BSF    1F.2
047D:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
047E:  BCF    03.5
047F:  BCF    1F.0
....................    enable_interrupts(INT_TIMER0); 
0480:  BSF    0B.5
....................    enable_interrupts(GLOBAL);    
0481:  MOVLW  C0
0482:  IORWF  0B,F
....................     
....................    delay_ms(200); 
0483:  MOVLW  C8
0484:  MOVWF  54
0485:  CALL   256
....................    initlcd(); 
0486:  GOTO   2CB
....................    lcdfill(0b11100000);   // 0bRRRGGGBB 
0487:  MOVLW  E0
0488:  MOVWF  53
0489:  CALL   297
....................    delay_ms(300); 
048A:  MOVLW  02
048B:  MOVWF  53
048C:  MOVLW  96
048D:  MOVWF  54
048E:  CALL   256
048F:  DECFSZ 53,F
0490:  GOTO   48C
....................    lcdfill(0b00011100);   // 0bRRRGGGBB 
0491:  MOVLW  1C
0492:  MOVWF  53
0493:  CALL   297
....................    delay_ms(300); 
0494:  MOVLW  02
0495:  MOVWF  53
0496:  MOVLW  96
0497:  MOVWF  54
0498:  CALL   256
0499:  DECFSZ 53,F
049A:  GOTO   496
....................    lcdfill(0b00000011);   // 0bRRRGGGBB 
049B:  MOVLW  03
049C:  MOVWF  53
049D:  CALL   297
....................    delay_ms(300);    
049E:  MOVLW  02
049F:  MOVWF  53
04A0:  MOVLW  96
04A1:  MOVWF  54
04A2:  CALL   256
04A3:  DECFSZ 53,F
04A4:  GOTO   4A0
....................    lcdfill(0b00000000);   // 0bRRRGGGBB 
04A5:  CLRF   53
04A6:  CALL   297
....................    delay_ms(500); 
04A7:  MOVLW  02
04A8:  MOVWF  53
04A9:  MOVLW  FA
04AA:  MOVWF  54
04AB:  CALL   256
04AC:  DECFSZ 53,F
04AD:  GOTO   4A9
....................     
....................    drawBox(WHITE, 0, 0, 10, 130); 
04AE:  CLRF   54
04AF:  MOVLW  FF
04B0:  MOVWF  53
04B1:  CLRF   55
04B2:  CLRF   56
04B3:  MOVLW  0A
04B4:  MOVWF  57
04B5:  MOVLW  82
04B6:  MOVWF  58
04B7:  CALL   358
....................    drawBox(BLACK, 10, 0, 10, 130); 
04B8:  CLRF   54
04B9:  CLRF   53
04BA:  MOVLW  0A
04BB:  MOVWF  55
04BC:  CLRF   56
04BD:  MOVWF  57
04BE:  MOVLW  82
04BF:  MOVWF  58
04C0:  CALL   358
....................    drawBox(RED,   20, 0, 10, 130); 
04C1:  CLRF   54
04C2:  MOVLW  E0
04C3:  MOVWF  53
04C4:  MOVLW  14
04C5:  MOVWF  55
04C6:  CLRF   56
04C7:  MOVLW  0A
04C8:  MOVWF  57
04C9:  MOVLW  82
04CA:  MOVWF  58
04CB:  CALL   358
....................    drawBox(GREEN, 30, 0, 10, 130); 
04CC:  CLRF   54
04CD:  MOVLW  1C
04CE:  MOVWF  53
04CF:  MOVLW  1E
04D0:  MOVWF  55
04D1:  CLRF   56
04D2:  MOVLW  0A
04D3:  MOVWF  57
04D4:  MOVLW  82
04D5:  MOVWF  58
04D6:  CALL   358
....................    drawBox(BLUE,  40, 0, 10, 130); 
04D7:  CLRF   54
04D8:  MOVLW  03
04D9:  MOVWF  53
04DA:  MOVLW  28
04DB:  MOVWF  55
04DC:  CLRF   56
04DD:  MOVLW  0A
04DE:  MOVWF  57
04DF:  MOVLW  82
04E0:  MOVWF  58
04E1:  CALL   358
....................    drawBox(PINK,  50, 0, 10, 130); 
04E2:  CLRF   54
04E3:  MOVLW  E3
04E4:  MOVWF  53
04E5:  MOVLW  32
04E6:  MOVWF  55
04E7:  CLRF   56
04E8:  MOVLW  0A
04E9:  MOVWF  57
04EA:  MOVLW  82
04EB:  MOVWF  58
04EC:  CALL   358
....................    drawBox(BLUE, 60, 0, 10, 130); 
04ED:  CLRF   54
04EE:  MOVLW  03
04EF:  MOVWF  53
04F0:  MOVLW  3C
04F1:  MOVWF  55
04F2:  CLRF   56
04F3:  MOVLW  0A
04F4:  MOVWF  57
04F5:  MOVLW  82
04F6:  MOVWF  58
04F7:  CALL   358
....................    drawBox(YELLOW,70, 0, 10, 130); 
04F8:  CLRF   54
04F9:  MOVLW  FC
04FA:  MOVWF  53
04FB:  MOVLW  46
04FC:  MOVWF  55
04FD:  CLRF   56
04FE:  MOVLW  0A
04FF:  MOVWF  57
0500:  MOVLW  82
0501:  MOVWF  58
0502:  CALL   358
....................    drawBox(ORANGE,80, 0, 10, 130);  
0503:  CLRF   54
0504:  MOVLW  F0
0505:  MOVWF  53
0506:  MOVLW  50
0507:  MOVWF  55
0508:  CLRF   56
0509:  MOVLW  0A
050A:  MOVWF  57
050B:  MOVLW  82
050C:  MOVWF  58
050D:  CALL   358
....................    drawBox(WHITE, 90, 0, 10, 130); 
050E:  CLRF   54
050F:  MOVLW  FF
0510:  MOVWF  53
0511:  MOVLW  5A
0512:  MOVWF  55
0513:  CLRF   56
0514:  MOVLW  0A
0515:  MOVWF  57
0516:  MOVLW  82
0517:  MOVWF  58
0518:  CALL   358
....................    drawBox(BLACK, 100, 0, 10, 130); 
0519:  CLRF   54
051A:  CLRF   53
051B:  MOVLW  64
051C:  MOVWF  55
051D:  CLRF   56
051E:  MOVLW  0A
051F:  MOVWF  57
0520:  MOVLW  82
0521:  MOVWF  58
0522:  CALL   358
....................    drawBox(RED,   110, 0, 10, 130); 
0523:  CLRF   54
0524:  MOVLW  E0
0525:  MOVWF  53
0526:  MOVLW  6E
0527:  MOVWF  55
0528:  CLRF   56
0529:  MOVLW  0A
052A:  MOVWF  57
052B:  MOVLW  82
052C:  MOVWF  58
052D:  CALL   358
....................    drawBox(GREEN, 120, 0, 10, 130); 
052E:  CLRF   54
052F:  MOVLW  1C
0530:  MOVWF  53
0531:  MOVLW  78
0532:  MOVWF  55
0533:  CLRF   56
0534:  MOVLW  0A
0535:  MOVWF  57
0536:  MOVLW  82
0537:  MOVWF  58
0538:  CALL   358
....................    delay_ms(2000); 
0539:  MOVLW  08
053A:  MOVWF  53
053B:  MOVLW  FA
053C:  MOVWF  54
053D:  CALL   256
053E:  DECFSZ 53,F
053F:  GOTO   53B
....................  
....................    lcdfill(BLACK); 
0540:  CLRF   53
0541:  CALL   297
....................  
....................    /*putChar(BLACK, WHITE, 'a', 0, 0);*/ 
....................   
....................    sprintf(text, "Teste Siemens C65"); 
0542:  CLRF   51
0543:  MOVLW  31
0544:  MOVWF  50
0545:  MOVLW  37
0546:  BSF    03.6
0547:  MOVWF  0D
0548:  MOVLW  02
0549:  MOVWF  0F
054A:  BCF    03.6
054B:  CALL   382
....................    putText(BLACK, WHITE, text, 17, 0, 0);   
054C:  CLRF   54
054D:  CLRF   53
054E:  CLRF   56
054F:  MOVLW  FF
0550:  MOVWF  55
0551:  CLRF   58
0552:  MOVLW  31
0553:  MOVWF  57
0554:  MOVLW  11
0555:  MOVWF  59
0556:  CLRF   5A
0557:  CLRF   5B
0558:  CALL   3ED
....................    delay_ms(300); 
0559:  MOVLW  02
055A:  MOVWF  53
055B:  MOVLW  96
055C:  MOVWF  54
055D:  CALL   256
055E:  DECFSZ 53,F
055F:  GOTO   55B
....................    drawBox(BLUE, 0, 94, 130, 10); 
0560:  CLRF   54
0561:  MOVLW  03
0562:  MOVWF  53
0563:  CLRF   55
0564:  MOVLW  5E
0565:  MOVWF  56
0566:  MOVLW  82
0567:  MOVWF  57
0568:  MOVLW  0A
0569:  MOVWF  58
056A:  CALL   358
....................    delay_ms(300);    
056B:  MOVLW  02
056C:  MOVWF  53
056D:  MOVLW  96
056E:  MOVWF  54
056F:  CALL   256
0570:  DECFSZ 53,F
0571:  GOTO   56D
....................    sprintf(text, "RBJ.NET Electronics"); 
0572:  CLRF   51
0573:  MOVLW  31
0574:  MOVWF  50
0575:  MOVLW  40
0576:  BSF    03.6
0577:  MOVWF  0D
0578:  MOVLW  02
0579:  MOVWF  0F
057A:  BCF    03.6
057B:  CALL   382
....................    putText(BLUE, WHITE, text, 19, 10, 96);   
057C:  CLRF   54
057D:  MOVLW  03
057E:  MOVWF  53
057F:  CLRF   56
0580:  MOVLW  FF
0581:  MOVWF  55
0582:  CLRF   58
0583:  MOVLW  31
0584:  MOVWF  57
0585:  MOVLW  13
0586:  MOVWF  59
0587:  MOVLW  0A
0588:  MOVWF  5A
0589:  MOVLW  60
058A:  MOVWF  5B
058B:  CALL   3ED
....................    delay_ms(300); 
058C:  MOVLW  02
058D:  MOVWF  53
058E:  MOVLW  96
058F:  MOVWF  54
0590:  CALL   256
0591:  DECFSZ 53,F
0592:  GOTO   58E
....................    sprintf(text, "-- Driver By Marlon --"); 
0593:  CLRF   51
0594:  MOVLW  31
0595:  MOVWF  50
0596:  MOVLW  4A
0597:  BSF    03.6
0598:  MOVWF  0D
0599:  MOVLW  02
059A:  MOVWF  0F
059B:  BCF    03.6
059C:  CALL   382
....................    putText(BLACK, WHITE, text, 22, 0, 110);   
059D:  CLRF   54
059E:  CLRF   53
059F:  CLRF   56
05A0:  MOVLW  FF
05A1:  MOVWF  55
05A2:  CLRF   58
05A3:  MOVLW  31
05A4:  MOVWF  57
05A5:  MOVLW  16
05A6:  MOVWF  59
05A7:  CLRF   5A
05A8:  MOVLW  6E
05A9:  MOVWF  5B
05AA:  CALL   3ED
....................    drawBox(GREEN, 20, 20, 30, 30); 
05AB:  CLRF   54
05AC:  MOVLW  1C
05AD:  MOVWF  53
05AE:  MOVLW  14
05AF:  MOVWF  55
05B0:  MOVWF  56
05B1:  MOVLW  1E
05B2:  MOVWF  57
05B3:  MOVWF  58
05B4:  CALL   358
....................    delay_ms(300); 
05B5:  MOVLW  02
05B6:  MOVWF  53
05B7:  MOVLW  96
05B8:  MOVWF  54
05B9:  CALL   256
05BA:  DECFSZ 53,F
05BB:  GOTO   5B7
....................    drawBox(BLUE, 50, 20, 30, 30);     
05BC:  CLRF   54
05BD:  MOVLW  03
05BE:  MOVWF  53
05BF:  MOVLW  32
05C0:  MOVWF  55
05C1:  MOVLW  14
05C2:  MOVWF  56
05C3:  MOVLW  1E
05C4:  MOVWF  57
05C5:  MOVWF  58
05C6:  CALL   358
....................    delay_ms(300); 
05C7:  MOVLW  02
05C8:  MOVWF  53
05C9:  MOVLW  96
05CA:  MOVWF  54
05CB:  CALL   256
05CC:  DECFSZ 53,F
05CD:  GOTO   5C9
....................    drawBox(RED, 80, 20, 30, 30); 
05CE:  CLRF   54
05CF:  MOVLW  E0
05D0:  MOVWF  53
05D1:  MOVLW  50
05D2:  MOVWF  55
05D3:  MOVLW  14
05D4:  MOVWF  56
05D5:  MOVLW  1E
05D6:  MOVWF  57
05D7:  MOVWF  58
05D8:  CALL   358
....................    delay_ms(300); 
05D9:  MOVLW  02
05DA:  MOVWF  53
05DB:  MOVLW  96
05DC:  MOVWF  54
05DD:  CALL   256
05DE:  DECFSZ 53,F
05DF:  GOTO   5DB
....................     
....................    drawBox(PINK, 20, 52, 30, 30); 
05E0:  CLRF   54
05E1:  MOVLW  E3
05E2:  MOVWF  53
05E3:  MOVLW  14
05E4:  MOVWF  55
05E5:  MOVLW  34
05E6:  MOVWF  56
05E7:  MOVLW  1E
05E8:  MOVWF  57
05E9:  MOVWF  58
05EA:  CALL   358
....................    delay_ms(300); 
05EB:  MOVLW  02
05EC:  MOVWF  53
05ED:  MOVLW  96
05EE:  MOVWF  54
05EF:  CALL   256
05F0:  DECFSZ 53,F
05F1:  GOTO   5ED
....................    drawBox(ORANGE, 50, 53, 30, 30);     
05F2:  CLRF   54
05F3:  MOVLW  F0
05F4:  MOVWF  53
05F5:  MOVLW  32
05F6:  MOVWF  55
05F7:  MOVLW  35
05F8:  MOVWF  56
05F9:  MOVLW  1E
05FA:  MOVWF  57
05FB:  MOVWF  58
05FC:  CALL   358
....................    delay_ms(300); 
05FD:  MOVLW  02
05FE:  MOVWF  53
05FF:  MOVLW  96
0600:  MOVWF  54
0601:  CALL   256
0602:  DECFSZ 53,F
0603:  GOTO   5FF
....................    drawBox(YELLOW, 80, 52, 30, 30); 
0604:  CLRF   54
0605:  MOVLW  FC
0606:  MOVWF  53
0607:  MOVLW  50
0608:  MOVWF  55
0609:  MOVLW  34
060A:  MOVWF  56
060B:  MOVLW  1E
060C:  MOVWF  57
060D:  MOVWF  58
060E:  CALL   358
....................    delay_ms(300); 
060F:  MOVLW  02
0610:  MOVWF  53
0611:  MOVLW  96
0612:  MOVWF  54
0613:  CALL   256
0614:  DECFSZ 53,F
0615:  GOTO   611
....................  
....................    while(true){} 
0616:  GOTO   616
.................... } 
....................  
.................... //--------------------------------------------------------------------------------- 
0617:  SLEEP

Configuration Fuses:
   Word  1: 3D3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
