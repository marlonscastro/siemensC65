// *****************************************************************************
//
// *****************************************************************************
#include <string.h>

#define OSC 0x02 // Oscillation mode set
#define DRVOUT 0x10 // Driver output mode set
#define DCDCSEL 0x20 // DC-DC select
#define BIAS 0x22 // Bias set
#define DCDCCLK 0x24 // DCDC clock division set
#define DCDCCTL 0x26 // DCDC and AMP on/off set
#define TEMPCOM 0x28 // Temperature compensation set
#define CONT1 0x2A // Contrast control 1
#define CONT2 0x2B // Contrast control 2
#define STBYOFF 0x2C // Standby off
#define STBYON 0x2D // Standby on
#define ADRMODE 0x30 // Adressing mode set
#define ROWVEC 0x32 // Row vector mode set
#define NLINV 0x34 // N-line invertion set
#define FRAFRE 0x36 // Frame frequency control
#define ENTRY 0x40 // Entry mode set
#define XSET 0x42 // X-adress area set
#define YSET 0x43 // Y-adress area set
#define DISON 0x51 // Display on
#define DISOFF 0x50 // Display off

// 8-bit color definitions
#define WHITE 0xFF
#define BLACK 0x00
#define RED 0xE0
#define GREEN 0x1C
#define BLUE 0x03
#define PINK 0xE3
#define LBLUE 0x1F
#define YELLOW 0xFC
#define ORANGE 0xF0
/*
*****************************************************************************
Pinout
| 1 Led-
| 2 Led+
| 3 NC
| 4 GND
| 5 2V9
| 6 DATA
| 7 CLK
| 8 RS
| 9 RST
| 10 CS
*****************************************************************************
*/

#define LCD_CS              pin_c0
#define LCD_RESET           pin_c1
#define LCD_RS              pin_a5
#define LCD_SCK             pin_c3
#define LCD_DATA            pin_c5

BYTE const TABLE5[240]=            {0x00,0x00,0x00,0x00,0x00,   // 20 space          ASCII table for NOKIA LCD: 96 rows * 5 bytes= 480 bytes
  0x00,0x00,0x5f,0x00,0x00,   // 21 !
  0x00,0x07,0x00,0x07,0x00,   // 22 "
  0x14,0x7f,0x14,0x7f,0x14,   // 23 #
  0x24,0x2a,0x7f,0x2a,0x12,   // 24 $
  0x23,0x13,0x08,0x64,0x62,   // 25 %
  0x36,0x49,0x55,0x22,0x50,   // 26 &
  0x00,0x05,0x03,0x00,0x00,   // 27 '
  0x00,0x1c,0x22,0x41,0x00,   // 28 (
  0x00,0x41,0x22,0x1c,0x00,   // 29 )
  0x14,0x08,0x3e,0x08,0x14,   // 2a *
  0x08,0x08,0x3e,0x08,0x08,   // 2b +
  0x00,0x50,0x30,0x00,0x00,   // 2c ,
  0x08,0x08,0x08,0x08,0x08,   // 2d -
  0x00,0x60,0x60,0x00,0x00,   // 2e .
  0x20,0x10,0x08,0x04,0x02,   // 2f /
  0x3e,0x51,0x49,0x45,0x3e,   // 30 0
  0x00,0x42,0x7f,0x40,0x00,   // 31 1
  0x42,0x61,0x51,0x49,0x46,   // 32 2
  0x21,0x41,0x45,0x4b,0x31,   // 33 3
  0x18,0x14,0x12,0x7f,0x10,   // 34 4
  0x27,0x45,0x45,0x45,0x39,   // 35 5
  0x3c,0x4a,0x49,0x49,0x30,   // 36 6
  0x01,0x71,0x09,0x05,0x03,   // 37 7
  0x36,0x49,0x49,0x49,0x36,   // 38 8
  0x06,0x49,0x49,0x29,0x1e,   // 39 9
  0x00,0x36,0x36,0x00,0x00,   // 3a :
  0x00,0x56,0x36,0x00,0x00,   // 3b ;
  0x08,0x14,0x22,0x41,0x00,   // 3c <
  0x14,0x14,0x14,0x14,0x14,   // 3d =
  0x00,0x41,0x22,0x14,0x08,   // 3e >
  0x02,0x01,0x51,0x09,0x06,   // 3f ?
  0x32,0x49,0x79,0x41,0x3e,   // 40 @
  0x7e,0x11,0x11,0x11,0x7e,   // 41 A
  0x7f,0x49,0x49,0x49,0x36,   // 42 B
  0x3e,0x41,0x41,0x41,0x22,   // 43 C
  0x7f,0x41,0x41,0x22,0x1c,   // 44 D
  0x7f,0x49,0x49,0x49,0x41,   // 45 E
  0x7f,0x09,0x09,0x09,0x01,   // 46 F
  0x3e,0x41,0x49,0x49,0x7a,   // 47 G
  0x7f,0x08,0x08,0x08,0x7f,   // 48 H
  0x00,0x41,0x7f,0x41,0x00,   // 49 I
  0x20,0x40,0x41,0x3f,0x01,   // 4a J
  0x7f,0x08,0x14,0x22,0x41,   // 4b K
  0x7f,0x40,0x40,0x40,0x40,   // 4c L
  0x7f,0x02,0x0c,0x02,0x7f,   // 4d M
  0x7f,0x04,0x08,0x10,0x7f,   // 4e N
  0x3e,0x41,0x41,0x41,0x3e    // 4f O
};   


BYTE const TABLE6[240]=            {0x7f,0x09,0x09,0x09,0x06,   // 50 P
  0x3e,0x41,0x51,0x21,0x5e,   // 51 Q
  0x7f,0x09,0x19,0x29,0x46,   // 52 R
  0x46,0x49,0x49,0x49,0x31,   // 53 S
  0x01,0x01,0x7f,0x01,0x01,   // 54 T
  0x3f,0x40,0x40,0x40,0x3f,   // 55 U
  0x1f,0x20,0x40,0x20,0x1f,   // 56 V
  0x3f,0x40,0x38,0x40,0x3f,   // 57 W
  0x63,0x14,0x08,0x14,0x63,   // 58 X
  0x07,0x08,0x70,0x08,0x07,   // 59 Y
  0x61,0x51,0x49,0x45,0x43,   // 5a Z
  0x00,0x7f,0x41,0x41,0x00,   // 5b [
  0x02,0x04,0x08,0x10,0x20,   // 5c
  0x00,0x41,0x41,0x7f,0x00,   // 5d
  0x04,0x02,0x01,0x02,0x04,   // 5e
  0x40,0x40,0x40,0x40,0x40,   // 5f
  0x00,0x01,0x02,0x04,0x00,   // 60
  0x20,0x54,0x54,0x54,0x78,   // 61 a
  0x7f,0x48,0x44,0x44,0x38,   // 62 b
  0x38,0x44,0x44,0x44,0x20,   // 63 c
  0x38,0x44,0x44,0x48,0x7f,   // 64 d
  0x38,0x54,0x54,0x54,0x18,   // 65 e
  0x08,0x7e,0x09,0x01,0x02,   // 66 f
  0x0c,0x52,0x52,0x52,0x3e,   // 67 g
  0x7f,0x08,0x04,0x04,0x78,   // 68 h
  0x00,0x44,0x7d,0x40,0x00,   // 69 i
  0x20,0x40,0x44,0x3d,0x00,   // 6a j
  0x7f,0x10,0x28,0x44,0x00,   // 6b k
  0x00,0x41,0x7f,0x40,0x00,   // 6c l
  0x7c,0x04,0x18,0x04,0x78,   // 6d m
  0x7c,0x08,0x04,0x04,0x78,   // 6e n
  0x38,0x44,0x44,0x44,0x38,   // 6f o
  0x7c,0x14,0x14,0x14,0x08,   // 70 p
  0x08,0x14,0x14,0x18,0x7c,   // 71 q
  0x7c,0x08,0x04,0x04,0x08,   // 72 r
  0x48,0x54,0x54,0x54,0x20,   // 73 s
  0x04,0x3f,0x44,0x40,0x20,   // 74 t
  0x3c,0x40,0x40,0x20,0x7c,   // 75 u
  0x1c,0x20,0x40,0x20,0x1c,   // 76 v
  0x3c,0x40,0x30,0x40,0x3c,   // 77 w
  0x44,0x28,0x10,0x28,0x44,   // 78 x
  0x0c,0x50,0x50,0x50,0x3c,   // 79 y
  0x44,0x64,0x54,0x4c,0x44,   // 7a z
  0x00,0x08,0x36,0x41,0x00,   // 7b
  0x00,0x00,0x7f,0x00,0x00,   // 7c
  0x00,0x41,0x36,0x08,0x00,   // 7d
  0x10,0x08,0x08,0x10,0x08,   // 7e
  0x78,0x46,0x41,0x46,0x78    // 7f
};

int fY = 0;
int fX = 0;
int16 Back;
int16 Front;

void initlcd(void);
void lcdfill(char color);
void lcdcommand(unsigned char dta);
void lcddata(unsigned char dta);
void write_lcd(unsigned char b);
void drawpixel(unsigned char x,unsigned char y,unsigned char color);

void lcddata(unsigned char dta){
   output_bit(LCD_CS, 0);
   output_bit(LCD_RS, 1);
   write_lcd(dta);
   output_bit(LCD_CS, 1);
}
// *****************************************************************************
//
// *****************************************************************************
void lcdcommand(unsigned char dta){
   output_bit(LCD_CS, 0);
   output_bit(LCD_RS, 0);
   write_lcd(dta);
   output_bit(LCD_CS, 1);
}
// *****************************************************************************
//
// *****************************************************************************
void write_lcd(unsigned char b){
   spi_write(b);
  /*char i;
  for (i=8;i>0;i--) {
    output_low(LCD_SCK);
    if ((b&0x80)==0){output_low(LCD_DATA);}
    else {output_high(LCD_DATA);}
    output_high(LCD_SCK);
    b=b<<1;
  }   */
}
// *****************************************************************************
//
// *****************************************************************************
void lcdcommand16(unsigned char cmd, unsigned char param){
   output_bit(LCD_CS, 0);
   output_bit(LCD_RS, 0);
   write_lcd(cmd);
   write_lcd(param);
   output_bit(LCD_CS, 1);
}
// *****************************************************************************
//
// *****************************************************************************
void initlcd(void){
// Hardware reset
   output_bit(LCD_RESET, 0);   
   output_bit(LCD_SCK, 1);
   output_bit(LCD_DATA, 1);
   output_bit(LCD_RS, 1);
   output_bit(LCD_CS, 1);
   output_bit(LCD_RESET, 1);
   
   //lcdcommand(DISOFF);
   lcdcommand(STBYOFF); // STANDBY off
   lcdcommand16(OSC,0x01); // P = 0x01 Oscillator on
   lcdcommand16(DRVOUT,0x34); // P = 0x30 Driver output
   lcdcommand16(DCDCSEL,0x01); // P = 0x01 DC-DC Select
   lcdcommand16(BIAS,0x01); // P = 0x01 Bias SET
   lcdcommand16(DCDCCLK,0x05); // P = 0x05 DCDC Clock
   lcdcommand16(DCDCCTL,0x0f); // P = 0x0F DCDC ON
   lcdcommand16(TEMPCOM,0x00); // P = 0x00 Temp
   lcdcommand16(CONT1,0xA5); // P = 0xA5 Contrast 1
   lcdcommand16(ADRMODE,0x41); // P = 0x01 256 colors,
   lcdcommand16(ROWVEC,0x01); // P = 0x01 Row Vector
   lcdcommand16(NLINV,0x82); // P = 0x82 Forcing invertion on,every 2 blocks
   lcdcommand16(ENTRY,0x00); // P = 0x00 Entry mode
   lcdfill(BLACK);
   lcdcommand(DISON); // Disp On
   }
// *****************************************************************************
//
// *****************************************************************************
void lcdfill(char color){
   unsigned long i;
   output_bit(LCD_CS, 0);   
   output_bit(LCD_RS, 0);
   write_lcd(XSET);
   write_lcd(0);
   write_lcd(131);
   write_lcd(YSET);
   write_lcd(0);
   write_lcd(131);
   output_bit(LCD_RS, 1);
   for(i = 0; i < (132*132); i++)
      write_lcd(color);
   output_bit(LCD_CS, 1);   
}
// *************************************************************************************
//
// *************************************************************************************
void drawpixel(unsigned char x,unsigned char y,unsigned char color){
   output_bit(LCD_CS, 0);
   output_bit(LCD_RS, 0);   
   write_lcd(XSET);
   write_lcd(x);
   write_lcd(x);
   write_lcd(YSET);
   write_lcd(y);
   write_lcd(y);
   output_bit(LCD_RS, 1);
   write_lcd(color); //RRRGGGBB
   output_bit(LCD_CS, 1);
}

void setFillArea(int X, int Y, int Width, int Height){
//   int StartX = 129 - Width - X + 1;
//   int EndX = 129 - X;

   int StartX = 2 + X;
   int EndX = 2 + X + Width;
   
   int StartY = Y;
   int EndY = Y + Height - 1;
   
   lcdcommand(XSET); 
   lcdcommand(StartX); 
   lcdcommand(EndX);
   lcdcommand(YSET); 
   lcdcommand(StartY); 
   lcdcommand(EndY);  
   
  /* lcdcommand(XSET); 
   lcdcommand(X); 
   lcdcommand(EndX);
   lcdcommand(YSET); 
   lcdcommand(StartY); 
   lcdcommand(EndY);  */  
}

void putChar(int16 BackColor, int16 FrontColor, char C, int X, int Y){
   setFillArea(X, Y, 5, 8);
   int i, j, Line;
 
   for (i = 0; i < 5; i++){
      if (C<0x50)      
         Line = TABLE5[(((C&0xff)-0x20)*5+i)];
      if (C>0x4f)
         Line = TABLE6[(((C&0xff)-0x50)*5+i)];
      for (j = 0; j < 8; j++){
         if (Line & 0x01){ // Line & 0x80    
                 lcddata(FrontColor);
         }
         else{
                 lcddata(BackColor);
         }
         Line = Line >> 1;   // Line = Line << 1;
      }
   } 
}
void drawBox(int16 Color, int X, int Y, int Width, int Height){   
   setFillArea(X, Y, Width, Height);
   int i, j, Line;
 
   for (i = 0; i < Width; i++){
      Line = 0xff;
      for (j = 0; j < Height; j++){
         //if (Line & 0x01){ // Line & 0x80    
                 lcddata(Color);
         //}
         //Line = Line >> 1;   // Line = Line << 1;
      }
   } 
}
void setXY(int X, int Y){
  fX = X;
  fY = Y;
}

void setFrontColor(int16 Color){
  Front = Color;
}

void setBackColor(int16 Color){
  Back = Color;
}

void putText(int16 BackColor, int16 FrontColor, char* Text, int Length, int X, int Y){
  int i;
  for (i = 0; i < Length; i++){
    putChar(BackColor,FrontColor,Text[i],X,Y);
    //X += 7;
   X +=6;
  }      
}

void writeLn(char* Text){
   putText(Back, Front, Text, strlen(Text), fX, fY);
   fY+=12;
}

